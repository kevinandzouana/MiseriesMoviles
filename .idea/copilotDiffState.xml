<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/miseries/Data/RepositorioSeries.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/miseries/Data/RepositorioSeries.kt" />
              <option name="originalContent" value="package com.example.miseries.Data&#10;&#10;import com.example.miseries.domain.modelo.Serie&#10;&#10;object RepositorioSeries {&#10;&#10;    private val series = mutableListOf&lt;Serie&gt;()&#10;&#10;    init {&#10;        series.add(Serie(&quot;Stranger Things&quot;,5,&quot;Netflix&quot;,&quot;Serie de terror juvenil&quot;))&#10;    }&#10;    fun size() = series.size&#10;&#10;    val numSerie: Int&#10;        get()= series.size&#10;&#10;    fun getSerie(id:Int) = series[id]&#10;&#10;    fun addSerie(serie: Serie): Boolean {&#10;        // Verificar si ya existe una serie con el mismo título&#10;        val yaExiste = series.any { it.titulo.equals(serie.titulo, ignoreCase = true) }&#10;        return if (!yaExiste) {&#10;            series.add(serie)&#10;        } else {&#10;            false // No se agrega si ya existe&#10;        }&#10;    }&#10;&#10;    fun getSeries(): List&lt;Serie&gt; {&#10;        // Devolver lista sin duplicados basándose en el título&#10;        return series.distinctBy { it.titulo.lowercase() }&#10;    }&#10;&#10;    fun borrarSerie(serie: Serie): Boolean {&#10;       return series.removeIf { it.titulo== serie.titulo }&#10;&#10;    }&#10;    fun updateSerie(descripcionAntigua: String, descripcionNueva: String): Boolean {&#10;        val serieIndex = series.indexOfFirst { it.descripcion == descripcionAntigua }&#10;        return if (serieIndex != -1) { // &lt;- debe ser -1, no 1&#10;            val serieActual = series[serieIndex]&#10;            val serieActualizada = serieActual.copy(descripcion = descripcionNueva)&#10;            series[serieIndex] = serieActualizada&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.miseries.Data&#10;&#10;import com.example.miseries.domain.modelo.Serie&#10;&#10;object RepositorioSeries {&#10;&#10;    private val series = mutableListOf&lt;Serie&gt;()&#10;&#10;    init {&#10;        series.add(Serie(&quot;Stranger Things&quot;,5,&quot;Netflix&quot;,&quot;Serie de terror juvenil&quot;))&#10;    }&#10;    fun size() = series.size&#10;&#10;    val numSerie: Int&#10;        get()= series.size&#10;&#10;    fun getSerie(id:Int) = series[id]&#10;&#10;    fun addSerie(serie: Serie): Boolean {&#10;        // Verificar si ya existe una serie con el mismo título&#10;        val yaExiste = series.any { it.titulo.equals(serie.titulo, ignoreCase = true) }&#10;        return if (!yaExiste) {&#10;            series.add(serie)&#10;        } else {&#10;            false // No se agrega si ya existe&#10;        }&#10;    }&#10;&#10;    fun getSeries(): List&lt;Serie&gt; {&#10;        // Devolver lista sin duplicados basándose en el título&#10;        return series.distinctBy { it.titulo.lowercase() }&#10;    }&#10;&#10;    fun borrarSerie(serie: Serie): Boolean {&#10;       return series.removeIf { it.titulo== serie.titulo }&#10;&#10;    }&#10;    fun updateSerie(descripcionAntigua: String, descripcionNueva: String): Boolean {&#10;        val serieIndex = series.indexOfFirst { it.descripcion == descripcionAntigua }&#10;        return if (serieIndex != -1) { // &lt;- debe ser -1, no 1&#10;            val serieActual = series[serieIndex]&#10;            val serieActualizada = serieActual.copy(descripcion = descripcionNueva)&#10;            series[serieIndex] = serieActualizada&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>